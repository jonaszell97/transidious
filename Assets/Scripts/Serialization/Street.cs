// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Street.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Transidious.Serialization {

  /// <summary>Holder for reflection information generated from Street.proto</summary>
  public static partial class StreetReflection {

    #region Descriptor
    /// <summary>File descriptor for Street.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StreetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxTdHJlZXQucHJvdG8SGVRyYW5zaWRpb3VzLlNlcmlhbGl6YXRpb24aDENv",
            "bW1vbi5wcm90byKDAQoSU3RyZWV0SW50ZXJzZWN0aW9uEjcKCW1hcE9iamVj",
            "dBgBIAEoCzIkLlRyYW5zaWRpb3VzLlNlcmlhbGl6YXRpb24uTWFwT2JqZWN0",
            "EjQKCHBvc2l0aW9uGAIgASgLMiIuVHJhbnNpZGlvdXMuU2VyaWFsaXphdGlv",
            "bi5WZWN0b3IyImkKDFRyYWZmaWNMaWdodBIKCgJJRBgBIAEoBRIOCgZzdGF0",
            "dXMYAiABKAUSGAoQdGltZVRvTmV4dFN3aXRjaBgDIAEoAhIPCgdyZWRUaW1l",
            "GAQgASgCEhIKCmdyZWVuUGhhc2UYBSABKAUiswIKDVN0cmVldFNlZ21lbnQS",
            "NwoJbWFwT2JqZWN0GAEgASgLMiQuVHJhbnNpZGlvdXMuU2VyaWFsaXphdGlv",
            "bi5NYXBPYmplY3QSNQoJcG9zaXRpb25zGAIgAygLMiIuVHJhbnNpZGlvdXMu",
            "U2VyaWFsaXphdGlvbi5WZWN0b3IyEhsKE3N0YXJ0SW50ZXJzZWN0aW9uSUQY",
            "AyABKA0SGQoRZW5kSW50ZXJzZWN0aW9uSUQYBCABKA0SFQoNaGFzVHJhbVRy",
            "YWNrcxgFIAEoCBIcChRvY2N1cGllZFBhcmtpbmdTcG90cxgGIAEoBRIbChNz",
            "dGFydFRyYWZmaWNMaWdodElEGAcgASgFEhkKEWVuZFRyYWZmaWNMaWdodElE",
            "GAggASgFEg0KBWZsYWdzGAkgASgFIugCCgZTdHJlZXQSNwoJbWFwT2JqZWN0",
            "GAEgASgLMiQuVHJhbnNpZGlvdXMuU2VyaWFsaXphdGlvbi5NYXBPYmplY3QS",
            "EwoLZGlzcGxheU5hbWUYAiABKAkSNAoEdHlwZRgDIAEoDjImLlRyYW5zaWRp",
            "b3VzLlNlcmlhbGl6YXRpb24uU3RyZWV0LlR5cGUSOgoIc2VnbWVudHMYBCAD",
            "KAsyKC5UcmFuc2lkaW91cy5TZXJpYWxpemF0aW9uLlN0cmVldFNlZ21lbnQS",
            "CwoDbGl0GAUgASgIEg4KBm9uZXdheRgGIAEoCBIQCghtYXhzcGVlZBgHIAEo",
            "DRINCgVsYW5lcxgIIAEoDSJgCgRUeXBlEgsKB1ByaW1hcnkQABINCglTZWNv",
            "bmRhcnkQARIMCghUZXJ0aWFyeRACEg8KC1Jlc2lkZW50aWFsEAMSCAoETGlu",
            "axAEEggKBFBhdGgQBRIJCgVSaXZlchAGQhyqAhlUcmFuc2lkaW91cy5TZXJp",
            "YWxpemF0aW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Transidious.Serialization.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.StreetIntersection), global::Transidious.Serialization.StreetIntersection.Parser, new[]{ "MapObject", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.TrafficLight), global::Transidious.Serialization.TrafficLight.Parser, new[]{ "ID", "Status", "TimeToNextSwitch", "RedTime", "GreenPhase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.StreetSegment), global::Transidious.Serialization.StreetSegment.Parser, new[]{ "MapObject", "Positions", "StartIntersectionID", "EndIntersectionID", "HasTramTracks", "OccupiedParkingSpots", "StartTrafficLightID", "EndTrafficLightID", "Flags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.Street), global::Transidious.Serialization.Street.Parser, new[]{ "MapObject", "DisplayName", "Type", "Segments", "Lit", "Oneway", "Maxspeed", "Lanes" }, null, new[]{ typeof(global::Transidious.Serialization.Street.Types.Type) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StreetIntersection : pb::IMessage<StreetIntersection> {
    private static readonly pb::MessageParser<StreetIntersection> _parser = new pb::MessageParser<StreetIntersection>(() => new StreetIntersection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreetIntersection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Transidious.Serialization.StreetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreetIntersection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreetIntersection(StreetIntersection other) : this() {
      mapObject_ = other.mapObject_ != null ? other.mapObject_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreetIntersection Clone() {
      return new StreetIntersection(this);
    }

    /// <summary>Field number for the "mapObject" field.</summary>
    public const int MapObjectFieldNumber = 1;
    private global::Transidious.Serialization.MapObject mapObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.MapObject MapObject {
      get { return mapObject_; }
      set {
        mapObject_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Transidious.Serialization.Vector2 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.Vector2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreetIntersection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreetIntersection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapObject, other.MapObject)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapObject_ != null) hash ^= MapObject.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapObject_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapObject);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapObject);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreetIntersection other) {
      if (other == null) {
        return;
      }
      if (other.mapObject_ != null) {
        if (mapObject_ == null) {
          MapObject = new global::Transidious.Serialization.MapObject();
        }
        MapObject.MergeFrom(other.MapObject);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Transidious.Serialization.Vector2();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mapObject_ == null) {
              MapObject = new global::Transidious.Serialization.MapObject();
            }
            input.ReadMessage(MapObject);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Transidious.Serialization.Vector2();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrafficLight : pb::IMessage<TrafficLight> {
    private static readonly pb::MessageParser<TrafficLight> _parser = new pb::MessageParser<TrafficLight>(() => new TrafficLight());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficLight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Transidious.Serialization.StreetReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight(TrafficLight other) : this() {
      iD_ = other.iD_;
      status_ = other.status_;
      timeToNextSwitch_ = other.timeToNextSwitch_;
      redTime_ = other.redTime_;
      greenPhase_ = other.greenPhase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight Clone() {
      return new TrafficLight(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timeToNextSwitch" field.</summary>
    public const int TimeToNextSwitchFieldNumber = 3;
    private float timeToNextSwitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeToNextSwitch {
      get { return timeToNextSwitch_; }
      set {
        timeToNextSwitch_ = value;
      }
    }

    /// <summary>Field number for the "redTime" field.</summary>
    public const int RedTimeFieldNumber = 4;
    private float redTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RedTime {
      get { return redTime_; }
      set {
        redTime_ = value;
      }
    }

    /// <summary>Field number for the "greenPhase" field.</summary>
    public const int GreenPhaseFieldNumber = 5;
    private int greenPhase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GreenPhase {
      get { return greenPhase_; }
      set {
        greenPhase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficLight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Status != other.Status) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeToNextSwitch, other.TimeToNextSwitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RedTime, other.RedTime)) return false;
      if (GreenPhase != other.GreenPhase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (TimeToNextSwitch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeToNextSwitch);
      if (RedTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RedTime);
      if (GreenPhase != 0) hash ^= GreenPhase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (TimeToNextSwitch != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TimeToNextSwitch);
      }
      if (RedTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RedTime);
      }
      if (GreenPhase != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GreenPhase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (TimeToNextSwitch != 0F) {
        size += 1 + 4;
      }
      if (RedTime != 0F) {
        size += 1 + 4;
      }
      if (GreenPhase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GreenPhase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficLight other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.TimeToNextSwitch != 0F) {
        TimeToNextSwitch = other.TimeToNextSwitch;
      }
      if (other.RedTime != 0F) {
        RedTime = other.RedTime;
      }
      if (other.GreenPhase != 0) {
        GreenPhase = other.GreenPhase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 29: {
            TimeToNextSwitch = input.ReadFloat();
            break;
          }
          case 37: {
            RedTime = input.ReadFloat();
            break;
          }
          case 40: {
            GreenPhase = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreetSegment : pb::IMessage<StreetSegment> {
    private static readonly pb::MessageParser<StreetSegment> _parser = new pb::MessageParser<StreetSegment>(() => new StreetSegment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreetSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Transidious.Serialization.StreetReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreetSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreetSegment(StreetSegment other) : this() {
      mapObject_ = other.mapObject_ != null ? other.mapObject_.Clone() : null;
      positions_ = other.positions_.Clone();
      startIntersectionID_ = other.startIntersectionID_;
      endIntersectionID_ = other.endIntersectionID_;
      hasTramTracks_ = other.hasTramTracks_;
      occupiedParkingSpots_ = other.occupiedParkingSpots_;
      startTrafficLightID_ = other.startTrafficLightID_;
      endTrafficLightID_ = other.endTrafficLightID_;
      flags_ = other.flags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreetSegment Clone() {
      return new StreetSegment(this);
    }

    /// <summary>Field number for the "mapObject" field.</summary>
    public const int MapObjectFieldNumber = 1;
    private global::Transidious.Serialization.MapObject mapObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.MapObject MapObject {
      get { return mapObject_; }
      set {
        mapObject_ = value;
      }
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Transidious.Serialization.Vector2> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(18, global::Transidious.Serialization.Vector2.Parser);
    private readonly pbc::RepeatedField<global::Transidious.Serialization.Vector2> positions_ = new pbc::RepeatedField<global::Transidious.Serialization.Vector2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Transidious.Serialization.Vector2> Positions {
      get { return positions_; }
    }

    /// <summary>Field number for the "startIntersectionID" field.</summary>
    public const int StartIntersectionIDFieldNumber = 3;
    private uint startIntersectionID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartIntersectionID {
      get { return startIntersectionID_; }
      set {
        startIntersectionID_ = value;
      }
    }

    /// <summary>Field number for the "endIntersectionID" field.</summary>
    public const int EndIntersectionIDFieldNumber = 4;
    private uint endIntersectionID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndIntersectionID {
      get { return endIntersectionID_; }
      set {
        endIntersectionID_ = value;
      }
    }

    /// <summary>Field number for the "hasTramTracks" field.</summary>
    public const int HasTramTracksFieldNumber = 5;
    private bool hasTramTracks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTramTracks {
      get { return hasTramTracks_; }
      set {
        hasTramTracks_ = value;
      }
    }

    /// <summary>Field number for the "occupiedParkingSpots" field.</summary>
    public const int OccupiedParkingSpotsFieldNumber = 6;
    private int occupiedParkingSpots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OccupiedParkingSpots {
      get { return occupiedParkingSpots_; }
      set {
        occupiedParkingSpots_ = value;
      }
    }

    /// <summary>Field number for the "startTrafficLightID" field.</summary>
    public const int StartTrafficLightIDFieldNumber = 7;
    private int startTrafficLightID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTrafficLightID {
      get { return startTrafficLightID_; }
      set {
        startTrafficLightID_ = value;
      }
    }

    /// <summary>Field number for the "endTrafficLightID" field.</summary>
    public const int EndTrafficLightIDFieldNumber = 8;
    private int endTrafficLightID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTrafficLightID {
      get { return endTrafficLightID_; }
      set {
        endTrafficLightID_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 9;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreetSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreetSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapObject, other.MapObject)) return false;
      if(!positions_.Equals(other.positions_)) return false;
      if (StartIntersectionID != other.StartIntersectionID) return false;
      if (EndIntersectionID != other.EndIntersectionID) return false;
      if (HasTramTracks != other.HasTramTracks) return false;
      if (OccupiedParkingSpots != other.OccupiedParkingSpots) return false;
      if (StartTrafficLightID != other.StartTrafficLightID) return false;
      if (EndTrafficLightID != other.EndTrafficLightID) return false;
      if (Flags != other.Flags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapObject_ != null) hash ^= MapObject.GetHashCode();
      hash ^= positions_.GetHashCode();
      if (StartIntersectionID != 0) hash ^= StartIntersectionID.GetHashCode();
      if (EndIntersectionID != 0) hash ^= EndIntersectionID.GetHashCode();
      if (HasTramTracks != false) hash ^= HasTramTracks.GetHashCode();
      if (OccupiedParkingSpots != 0) hash ^= OccupiedParkingSpots.GetHashCode();
      if (StartTrafficLightID != 0) hash ^= StartTrafficLightID.GetHashCode();
      if (EndTrafficLightID != 0) hash ^= EndTrafficLightID.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapObject_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapObject);
      }
      positions_.WriteTo(output, _repeated_positions_codec);
      if (StartIntersectionID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(StartIntersectionID);
      }
      if (EndIntersectionID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EndIntersectionID);
      }
      if (HasTramTracks != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasTramTracks);
      }
      if (OccupiedParkingSpots != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OccupiedParkingSpots);
      }
      if (StartTrafficLightID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StartTrafficLightID);
      }
      if (EndTrafficLightID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EndTrafficLightID);
      }
      if (Flags != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Flags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapObject);
      }
      size += positions_.CalculateSize(_repeated_positions_codec);
      if (StartIntersectionID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartIntersectionID);
      }
      if (EndIntersectionID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndIntersectionID);
      }
      if (HasTramTracks != false) {
        size += 1 + 1;
      }
      if (OccupiedParkingSpots != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OccupiedParkingSpots);
      }
      if (StartTrafficLightID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTrafficLightID);
      }
      if (EndTrafficLightID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTrafficLightID);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreetSegment other) {
      if (other == null) {
        return;
      }
      if (other.mapObject_ != null) {
        if (mapObject_ == null) {
          MapObject = new global::Transidious.Serialization.MapObject();
        }
        MapObject.MergeFrom(other.MapObject);
      }
      positions_.Add(other.positions_);
      if (other.StartIntersectionID != 0) {
        StartIntersectionID = other.StartIntersectionID;
      }
      if (other.EndIntersectionID != 0) {
        EndIntersectionID = other.EndIntersectionID;
      }
      if (other.HasTramTracks != false) {
        HasTramTracks = other.HasTramTracks;
      }
      if (other.OccupiedParkingSpots != 0) {
        OccupiedParkingSpots = other.OccupiedParkingSpots;
      }
      if (other.StartTrafficLightID != 0) {
        StartTrafficLightID = other.StartTrafficLightID;
      }
      if (other.EndTrafficLightID != 0) {
        EndTrafficLightID = other.EndTrafficLightID;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mapObject_ == null) {
              MapObject = new global::Transidious.Serialization.MapObject();
            }
            input.ReadMessage(MapObject);
            break;
          }
          case 18: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
          case 24: {
            StartIntersectionID = input.ReadUInt32();
            break;
          }
          case 32: {
            EndIntersectionID = input.ReadUInt32();
            break;
          }
          case 40: {
            HasTramTracks = input.ReadBool();
            break;
          }
          case 48: {
            OccupiedParkingSpots = input.ReadInt32();
            break;
          }
          case 56: {
            StartTrafficLightID = input.ReadInt32();
            break;
          }
          case 64: {
            EndTrafficLightID = input.ReadInt32();
            break;
          }
          case 72: {
            Flags = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Street : pb::IMessage<Street> {
    private static readonly pb::MessageParser<Street> _parser = new pb::MessageParser<Street>(() => new Street());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Street> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Transidious.Serialization.StreetReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Street() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Street(Street other) : this() {
      mapObject_ = other.mapObject_ != null ? other.mapObject_.Clone() : null;
      displayName_ = other.displayName_;
      type_ = other.type_;
      segments_ = other.segments_.Clone();
      lit_ = other.lit_;
      oneway_ = other.oneway_;
      maxspeed_ = other.maxspeed_;
      lanes_ = other.lanes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Street Clone() {
      return new Street(this);
    }

    /// <summary>Field number for the "mapObject" field.</summary>
    public const int MapObjectFieldNumber = 1;
    private global::Transidious.Serialization.MapObject mapObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.MapObject MapObject {
      get { return mapObject_; }
      set {
        mapObject_ = value;
      }
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Transidious.Serialization.Street.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.Street.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "segments" field.</summary>
    public const int SegmentsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Transidious.Serialization.StreetSegment> _repeated_segments_codec
        = pb::FieldCodec.ForMessage(34, global::Transidious.Serialization.StreetSegment.Parser);
    private readonly pbc::RepeatedField<global::Transidious.Serialization.StreetSegment> segments_ = new pbc::RepeatedField<global::Transidious.Serialization.StreetSegment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Transidious.Serialization.StreetSegment> Segments {
      get { return segments_; }
    }

    /// <summary>Field number for the "lit" field.</summary>
    public const int LitFieldNumber = 5;
    private bool lit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Lit {
      get { return lit_; }
      set {
        lit_ = value;
      }
    }

    /// <summary>Field number for the "oneway" field.</summary>
    public const int OnewayFieldNumber = 6;
    private bool oneway_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Oneway {
      get { return oneway_; }
      set {
        oneway_ = value;
      }
    }

    /// <summary>Field number for the "maxspeed" field.</summary>
    public const int MaxspeedFieldNumber = 7;
    private uint maxspeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Maxspeed {
      get { return maxspeed_; }
      set {
        maxspeed_ = value;
      }
    }

    /// <summary>Field number for the "lanes" field.</summary>
    public const int LanesFieldNumber = 8;
    private uint lanes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lanes {
      get { return lanes_; }
      set {
        lanes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Street);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Street other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapObject, other.MapObject)) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Type != other.Type) return false;
      if(!segments_.Equals(other.segments_)) return false;
      if (Lit != other.Lit) return false;
      if (Oneway != other.Oneway) return false;
      if (Maxspeed != other.Maxspeed) return false;
      if (Lanes != other.Lanes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapObject_ != null) hash ^= MapObject.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= segments_.GetHashCode();
      if (Lit != false) hash ^= Lit.GetHashCode();
      if (Oneway != false) hash ^= Oneway.GetHashCode();
      if (Maxspeed != 0) hash ^= Maxspeed.GetHashCode();
      if (Lanes != 0) hash ^= Lanes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapObject_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapObject);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      segments_.WriteTo(output, _repeated_segments_codec);
      if (Lit != false) {
        output.WriteRawTag(40);
        output.WriteBool(Lit);
      }
      if (Oneway != false) {
        output.WriteRawTag(48);
        output.WriteBool(Oneway);
      }
      if (Maxspeed != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Maxspeed);
      }
      if (Lanes != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Lanes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapObject);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += segments_.CalculateSize(_repeated_segments_codec);
      if (Lit != false) {
        size += 1 + 1;
      }
      if (Oneway != false) {
        size += 1 + 1;
      }
      if (Maxspeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxspeed);
      }
      if (Lanes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lanes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Street other) {
      if (other == null) {
        return;
      }
      if (other.mapObject_ != null) {
        if (mapObject_ == null) {
          MapObject = new global::Transidious.Serialization.MapObject();
        }
        MapObject.MergeFrom(other.MapObject);
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      segments_.Add(other.segments_);
      if (other.Lit != false) {
        Lit = other.Lit;
      }
      if (other.Oneway != false) {
        Oneway = other.Oneway;
      }
      if (other.Maxspeed != 0) {
        Maxspeed = other.Maxspeed;
      }
      if (other.Lanes != 0) {
        Lanes = other.Lanes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mapObject_ == null) {
              MapObject = new global::Transidious.Serialization.MapObject();
            }
            input.ReadMessage(MapObject);
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::Transidious.Serialization.Street.Types.Type) input.ReadEnum();
            break;
          }
          case 34: {
            segments_.AddEntriesFrom(input, _repeated_segments_codec);
            break;
          }
          case 40: {
            Lit = input.ReadBool();
            break;
          }
          case 48: {
            Oneway = input.ReadBool();
            break;
          }
          case 56: {
            Maxspeed = input.ReadUInt32();
            break;
          }
          case 64: {
            Lanes = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Street message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Primary")] Primary = 0,
        [pbr::OriginalName("Secondary")] Secondary = 1,
        [pbr::OriginalName("Tertiary")] Tertiary = 2,
        [pbr::OriginalName("Residential")] Residential = 3,
        [pbr::OriginalName("Link")] Link = 4,
        [pbr::OriginalName("Path")] Path = 5,
        [pbr::OriginalName("River")] River = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code

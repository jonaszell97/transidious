// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Transit.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Transidious.Serialization {

  /// <summary>Holder for reflection information generated from Transit.proto</summary>
  public static partial class TransitReflection {

    #region Descriptor
    /// <summary>File descriptor for Transit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TransitReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1UcmFuc2l0LnByb3RvEhlUcmFuc2lkaW91cy5TZXJpYWxpemF0aW9uGgxD",
            "b21tb24ucHJvdG8iNAoIU2NoZWR1bGUSFgoOZmlyc3REZXBhcnR1cmUYASAB",
            "KAQSEAoIaW50ZXJ2YWwYAiABKAIi2gEKBExpbmUSNwoJbWFwT2JqZWN0GAEg",
            "ASgLMiQuVHJhbnNpZGlvdXMuU2VyaWFsaXphdGlvbi5NYXBPYmplY3QSNAoE",
            "dHlwZRgCIAEoDjImLlRyYW5zaWRpb3VzLlNlcmlhbGl6YXRpb24uVHJhbnNp",
            "dFR5cGUSDwoHZGVwb3RJRBgDIAEoDRIPCgdzdG9wSURzGAQgAygNEhAKCHJv",
            "dXRlSURzGAUgAygNEi8KBWNvbG9yGAYgASgLMiAuVHJhbnNpZGlvdXMuU2Vy",
            "aWFsaXphdGlvbi5Db2xvciLAAwoEU3RvcBI3CgltYXBPYmplY3QYASABKAsy",
            "JC5UcmFuc2lkaW91cy5TZXJpYWxpemF0aW9uLk1hcE9iamVjdBI0Cghwb3Np",
            "dGlvbhgCIAEoCzIiLlRyYW5zaWRpb3VzLlNlcmlhbGl6YXRpb24uVmVjdG9y",
            "MhIYChBvdXRnb2luZ1JvdXRlSURzGAMgAygNEhAKCHJvdXRlSURzGAQgAygN",
            "Ej8KCXNjaGVkdWxlcxgFIAMoCzIsLlRyYW5zaWRpb3VzLlNlcmlhbGl6YXRp",
            "b24uU3RvcC5TdG9wU2NoZWR1bGUSNgoEdHlwZRgGIAEoDjIoLlRyYW5zaWRp",
            "b3VzLlNlcmlhbGl6YXRpb24uU3RvcC5TdG9wVHlwZRpVCgxTdG9wU2NoZWR1",
            "bGUSDgoGbGluZUlEGAEgASgNEjUKCHNjaGVkdWxlGAIgASgLMiMuVHJhbnNp",
            "ZGlvdXMuU2VyaWFsaXphdGlvbi5TY2hlZHVsZSJNCghTdG9wVHlwZRIPCgtT",
            "dHJlZXRCb3VuZBAAEg8KC0Fib3ZlR3JvdW5kEAESDwoLVW5kZXJncm91bmQQ",
            "AhIOCgpXYXRlckJvdW5kEAMilgcKBVJvdXRlEjcKCW1hcE9iamVjdBgBIAEo",
            "CzIkLlRyYW5zaWRpb3VzLlNlcmlhbGl6YXRpb24uTWFwT2JqZWN0Eg4KBmxp",
            "bmVJRBgCIAEoDRI1Cglwb3NpdGlvbnMYAyADKAsyIi5UcmFuc2lkaW91cy5T",
            "ZXJpYWxpemF0aW9uLlZlY3RvcjISEwoLYmVnaW5TdG9wSUQYBCABKA0SEQoJ",
            "ZW5kU3RvcElEGAUgASgNEhcKD3RvdGFsVHJhdmVsVGltZRgGIAEoAhITCgtp",
            "c0JhY2tSb3V0ZRgHIAEoCBJcChZzdHJlZXRTZWdtZW50T2Zmc2V0TWFwGAgg",
            "AygLMjwuVHJhbnNpZGlvdXMuU2VyaWFsaXphdGlvbi5Sb3V0ZS5TdHJlZXRT",
            "ZWdtZW50T2Zmc2V0TWFwRW50cnkSVAoScGF0aFNlZ21lbnRJbmZvTWFwGAkg",
            "AygLMjguVHJhbnNpZGlvdXMuU2VyaWFsaXphdGlvbi5Sb3V0ZS5QYXRoU2Vn",
            "bWVudEluZm9NYXBFbnRyeRrFAQoPUGF0aFNlZ21lbnRJbmZvEhEKCXNlZ21l",
            "bnRJRBgBIAEoDRIMCgRsYW5lGAIgASgFEg4KBm9mZnNldBgDIAEoBRIOCgZs",
            "ZW5ndGgYBCABKAUSFAoMcGFydGlhbFN0YXJ0GAUgASgIEhIKCnBhcnRpYWxF",
            "bmQYBiABKAgSEAoIYmFja3dhcmQYByABKAgSNQoJZGlyZWN0aW9uGAggASgL",
            "MiIuVHJhbnNpZGlvdXMuU2VyaWFsaXphdGlvbi5WZWN0b3IyGjEKEFN0cmVl",
            "dFNlZ21lbnRLZXkSDwoHc2VnbWVudBgBIAEoBRIMCgRsYW5lGAIgASgFGp4B",
            "ChtTdHJlZXRTZWdtZW50T2Zmc2V0TWFwRW50cnkSPgoDa2V5GAEgASgLMjEu",
            "VHJhbnNpZGlvdXMuU2VyaWFsaXphdGlvbi5Sb3V0ZS5TdHJlZXRTZWdtZW50",
            "S2V5Ej8KBXZhbHVlGAIgAygLMjAuVHJhbnNpZGlvdXMuU2VyaWFsaXphdGlv",
            "bi5Sb3V0ZS5QYXRoU2VnbWVudEluZm8aZwoXUGF0aFNlZ21lbnRJbmZvTWFw",
            "RW50cnkSCwoDa2V5GAEgASgNEj8KBXZhbHVlGAIgASgLMjAuVHJhbnNpZGlv",
            "dXMuU2VyaWFsaXphdGlvbi5Sb3V0ZS5QYXRoU2VnbWVudEluZm8qWQoLVHJh",
            "bnNpdFR5cGUSBwoDQnVzEAASCAoEVHJhbRABEgoKBlN1YndheRACEhEKDUlu",
            "dGVyY2l0eVJhaWwQAxIJCgVGZXJyeRAEEg0KCUxpZ2h0UmFpbBAFQhyqAhlU",
            "cmFuc2lkaW91cy5TZXJpYWxpemF0aW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Transidious.Serialization.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Transidious.Serialization.TransitType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.Schedule), global::Transidious.Serialization.Schedule.Parser, new[]{ "FirstDeparture", "Interval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.Line), global::Transidious.Serialization.Line.Parser, new[]{ "MapObject", "Type", "DepotID", "StopIDs", "RouteIDs", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.Stop), global::Transidious.Serialization.Stop.Parser, new[]{ "MapObject", "Position", "OutgoingRouteIDs", "RouteIDs", "Schedules", "Type" }, null, new[]{ typeof(global::Transidious.Serialization.Stop.Types.StopType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.Stop.Types.StopSchedule), global::Transidious.Serialization.Stop.Types.StopSchedule.Parser, new[]{ "LineID", "Schedule" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.Route), global::Transidious.Serialization.Route.Parser, new[]{ "MapObject", "LineID", "Positions", "BeginStopID", "EndStopID", "TotalTravelTime", "IsBackRoute", "StreetSegmentOffsetMap", "PathSegmentInfoMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.Route.Types.PathSegmentInfo), global::Transidious.Serialization.Route.Types.PathSegmentInfo.Parser, new[]{ "SegmentID", "Lane", "Offset", "Length", "PartialStart", "PartialEnd", "Backward", "Direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.Route.Types.StreetSegmentKey), global::Transidious.Serialization.Route.Types.StreetSegmentKey.Parser, new[]{ "Segment", "Lane" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.Route.Types.StreetSegmentOffsetMapEntry), global::Transidious.Serialization.Route.Types.StreetSegmentOffsetMapEntry.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Transidious.Serialization.Route.Types.PathSegmentInfoMapEntry), global::Transidious.Serialization.Route.Types.PathSegmentInfoMapEntry.Parser, new[]{ "Key", "Value" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum TransitType {
    /// <summary>
    //// A bus line.
    /// </summary>
    [pbr::OriginalName("Bus")] Bus = 0,
    /// <summary>
    //// A tram line.
    /// </summary>
    [pbr::OriginalName("Tram")] Tram = 1,
    /// <summary>
    //// A subway line.
    /// </summary>
    [pbr::OriginalName("Subway")] Subway = 2,
    /// <summary>
    //// A regional train line.
    /// </summary>
    [pbr::OriginalName("IntercityRail")] IntercityRail = 3,
    /// <summary>
    //// A ferry line.
    /// </summary>
    [pbr::OriginalName("Ferry")] Ferry = 4,
    /// <summary>
    //// A light rail line.
    /// </summary>
    [pbr::OriginalName("LightRail")] LightRail = 5,
  }

  #endregion

  #region Messages
  public sealed partial class Schedule : pb::IMessage<Schedule> {
    private static readonly pb::MessageParser<Schedule> _parser = new pb::MessageParser<Schedule>(() => new Schedule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Schedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Transidious.Serialization.TransitReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schedule(Schedule other) : this() {
      firstDeparture_ = other.firstDeparture_;
      interval_ = other.interval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schedule Clone() {
      return new Schedule(this);
    }

    /// <summary>Field number for the "firstDeparture" field.</summary>
    public const int FirstDepartureFieldNumber = 1;
    private ulong firstDeparture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FirstDeparture {
      get { return firstDeparture_; }
      set {
        firstDeparture_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 2;
    private float interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Schedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Schedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirstDeparture != other.FirstDeparture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Interval, other.Interval)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FirstDeparture != 0UL) hash ^= FirstDeparture.GetHashCode();
      if (Interval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Interval);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FirstDeparture != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FirstDeparture);
      }
      if (Interval != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Interval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FirstDeparture != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FirstDeparture);
      }
      if (Interval != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Schedule other) {
      if (other == null) {
        return;
      }
      if (other.FirstDeparture != 0UL) {
        FirstDeparture = other.FirstDeparture;
      }
      if (other.Interval != 0F) {
        Interval = other.Interval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FirstDeparture = input.ReadUInt64();
            break;
          }
          case 21: {
            Interval = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Line : pb::IMessage<Line> {
    private static readonly pb::MessageParser<Line> _parser = new pb::MessageParser<Line>(() => new Line());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Line> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Transidious.Serialization.TransitReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line(Line other) : this() {
      mapObject_ = other.mapObject_ != null ? other.mapObject_.Clone() : null;
      type_ = other.type_;
      depotID_ = other.depotID_;
      stopIDs_ = other.stopIDs_.Clone();
      routeIDs_ = other.routeIDs_.Clone();
      color_ = other.color_ != null ? other.color_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line Clone() {
      return new Line(this);
    }

    /// <summary>Field number for the "mapObject" field.</summary>
    public const int MapObjectFieldNumber = 1;
    private global::Transidious.Serialization.MapObject mapObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.MapObject MapObject {
      get { return mapObject_; }
      set {
        mapObject_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Transidious.Serialization.TransitType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.TransitType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "depotID" field.</summary>
    public const int DepotIDFieldNumber = 3;
    private uint depotID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DepotID {
      get { return depotID_; }
      set {
        depotID_ = value;
      }
    }

    /// <summary>Field number for the "stopIDs" field.</summary>
    public const int StopIDsFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_stopIDs_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> stopIDs_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> StopIDs {
      get { return stopIDs_; }
    }

    /// <summary>Field number for the "routeIDs" field.</summary>
    public const int RouteIDsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_routeIDs_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> routeIDs_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RouteIDs {
      get { return routeIDs_; }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 6;
    private global::Transidious.Serialization.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Line);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Line other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapObject, other.MapObject)) return false;
      if (Type != other.Type) return false;
      if (DepotID != other.DepotID) return false;
      if(!stopIDs_.Equals(other.stopIDs_)) return false;
      if(!routeIDs_.Equals(other.routeIDs_)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapObject_ != null) hash ^= MapObject.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (DepotID != 0) hash ^= DepotID.GetHashCode();
      hash ^= stopIDs_.GetHashCode();
      hash ^= routeIDs_.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapObject_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapObject);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (DepotID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DepotID);
      }
      stopIDs_.WriteTo(output, _repeated_stopIDs_codec);
      routeIDs_.WriteTo(output, _repeated_routeIDs_codec);
      if (color_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapObject);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (DepotID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DepotID);
      }
      size += stopIDs_.CalculateSize(_repeated_stopIDs_codec);
      size += routeIDs_.CalculateSize(_repeated_routeIDs_codec);
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Line other) {
      if (other == null) {
        return;
      }
      if (other.mapObject_ != null) {
        if (mapObject_ == null) {
          MapObject = new global::Transidious.Serialization.MapObject();
        }
        MapObject.MergeFrom(other.MapObject);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.DepotID != 0) {
        DepotID = other.DepotID;
      }
      stopIDs_.Add(other.stopIDs_);
      routeIDs_.Add(other.routeIDs_);
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Transidious.Serialization.Color();
        }
        Color.MergeFrom(other.Color);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mapObject_ == null) {
              MapObject = new global::Transidious.Serialization.MapObject();
            }
            input.ReadMessage(MapObject);
            break;
          }
          case 16: {
            Type = (global::Transidious.Serialization.TransitType) input.ReadEnum();
            break;
          }
          case 24: {
            DepotID = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            stopIDs_.AddEntriesFrom(input, _repeated_stopIDs_codec);
            break;
          }
          case 42:
          case 40: {
            routeIDs_.AddEntriesFrom(input, _repeated_routeIDs_codec);
            break;
          }
          case 50: {
            if (color_ == null) {
              Color = new global::Transidious.Serialization.Color();
            }
            input.ReadMessage(Color);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Stop : pb::IMessage<Stop> {
    private static readonly pb::MessageParser<Stop> _parser = new pb::MessageParser<Stop>(() => new Stop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Transidious.Serialization.TransitReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stop(Stop other) : this() {
      mapObject_ = other.mapObject_ != null ? other.mapObject_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      outgoingRouteIDs_ = other.outgoingRouteIDs_.Clone();
      routeIDs_ = other.routeIDs_.Clone();
      schedules_ = other.schedules_.Clone();
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stop Clone() {
      return new Stop(this);
    }

    /// <summary>Field number for the "mapObject" field.</summary>
    public const int MapObjectFieldNumber = 1;
    private global::Transidious.Serialization.MapObject mapObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.MapObject MapObject {
      get { return mapObject_; }
      set {
        mapObject_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Transidious.Serialization.Vector2 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.Vector2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "outgoingRouteIDs" field.</summary>
    public const int OutgoingRouteIDsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_outgoingRouteIDs_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> outgoingRouteIDs_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OutgoingRouteIDs {
      get { return outgoingRouteIDs_; }
    }

    /// <summary>Field number for the "routeIDs" field.</summary>
    public const int RouteIDsFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_routeIDs_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> routeIDs_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RouteIDs {
      get { return routeIDs_; }
    }

    /// <summary>Field number for the "schedules" field.</summary>
    public const int SchedulesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Transidious.Serialization.Stop.Types.StopSchedule> _repeated_schedules_codec
        = pb::FieldCodec.ForMessage(42, global::Transidious.Serialization.Stop.Types.StopSchedule.Parser);
    private readonly pbc::RepeatedField<global::Transidious.Serialization.Stop.Types.StopSchedule> schedules_ = new pbc::RepeatedField<global::Transidious.Serialization.Stop.Types.StopSchedule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Transidious.Serialization.Stop.Types.StopSchedule> Schedules {
      get { return schedules_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private global::Transidious.Serialization.Stop.Types.StopType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.Stop.Types.StopType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapObject, other.MapObject)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if(!outgoingRouteIDs_.Equals(other.outgoingRouteIDs_)) return false;
      if(!routeIDs_.Equals(other.routeIDs_)) return false;
      if(!schedules_.Equals(other.schedules_)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapObject_ != null) hash ^= MapObject.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      hash ^= outgoingRouteIDs_.GetHashCode();
      hash ^= routeIDs_.GetHashCode();
      hash ^= schedules_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapObject_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapObject);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      outgoingRouteIDs_.WriteTo(output, _repeated_outgoingRouteIDs_codec);
      routeIDs_.WriteTo(output, _repeated_routeIDs_codec);
      schedules_.WriteTo(output, _repeated_schedules_codec);
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapObject);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      size += outgoingRouteIDs_.CalculateSize(_repeated_outgoingRouteIDs_codec);
      size += routeIDs_.CalculateSize(_repeated_routeIDs_codec);
      size += schedules_.CalculateSize(_repeated_schedules_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stop other) {
      if (other == null) {
        return;
      }
      if (other.mapObject_ != null) {
        if (mapObject_ == null) {
          MapObject = new global::Transidious.Serialization.MapObject();
        }
        MapObject.MergeFrom(other.MapObject);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Transidious.Serialization.Vector2();
        }
        Position.MergeFrom(other.Position);
      }
      outgoingRouteIDs_.Add(other.outgoingRouteIDs_);
      routeIDs_.Add(other.routeIDs_);
      schedules_.Add(other.schedules_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mapObject_ == null) {
              MapObject = new global::Transidious.Serialization.MapObject();
            }
            input.ReadMessage(MapObject);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Transidious.Serialization.Vector2();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26:
          case 24: {
            outgoingRouteIDs_.AddEntriesFrom(input, _repeated_outgoingRouteIDs_codec);
            break;
          }
          case 34:
          case 32: {
            routeIDs_.AddEntriesFrom(input, _repeated_routeIDs_codec);
            break;
          }
          case 42: {
            schedules_.AddEntriesFrom(input, _repeated_schedules_codec);
            break;
          }
          case 48: {
            Type = (global::Transidious.Serialization.Stop.Types.StopType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Stop message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StopType {
        [pbr::OriginalName("StreetBound")] StreetBound = 0,
        [pbr::OriginalName("AboveGround")] AboveGround = 1,
        [pbr::OriginalName("Underground")] Underground = 2,
        [pbr::OriginalName("WaterBound")] WaterBound = 3,
      }

      public sealed partial class StopSchedule : pb::IMessage<StopSchedule> {
        private static readonly pb::MessageParser<StopSchedule> _parser = new pb::MessageParser<StopSchedule>(() => new StopSchedule());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StopSchedule> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Transidious.Serialization.Stop.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopSchedule() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopSchedule(StopSchedule other) : this() {
          lineID_ = other.lineID_;
          schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopSchedule Clone() {
          return new StopSchedule(this);
        }

        /// <summary>Field number for the "lineID" field.</summary>
        public const int LineIDFieldNumber = 1;
        private uint lineID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LineID {
          get { return lineID_; }
          set {
            lineID_ = value;
          }
        }

        /// <summary>Field number for the "schedule" field.</summary>
        public const int ScheduleFieldNumber = 2;
        private global::Transidious.Serialization.Schedule schedule_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Transidious.Serialization.Schedule Schedule {
          get { return schedule_; }
          set {
            schedule_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StopSchedule);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StopSchedule other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LineID != other.LineID) return false;
          if (!object.Equals(Schedule, other.Schedule)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LineID != 0) hash ^= LineID.GetHashCode();
          if (schedule_ != null) hash ^= Schedule.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LineID != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(LineID);
          }
          if (schedule_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Schedule);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LineID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineID);
          }
          if (schedule_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StopSchedule other) {
          if (other == null) {
            return;
          }
          if (other.LineID != 0) {
            LineID = other.LineID;
          }
          if (other.schedule_ != null) {
            if (schedule_ == null) {
              Schedule = new global::Transidious.Serialization.Schedule();
            }
            Schedule.MergeFrom(other.Schedule);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                LineID = input.ReadUInt32();
                break;
              }
              case 18: {
                if (schedule_ == null) {
                  Schedule = new global::Transidious.Serialization.Schedule();
                }
                input.ReadMessage(Schedule);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Route : pb::IMessage<Route> {
    private static readonly pb::MessageParser<Route> _parser = new pb::MessageParser<Route>(() => new Route());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Route> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Transidious.Serialization.TransitReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route(Route other) : this() {
      mapObject_ = other.mapObject_ != null ? other.mapObject_.Clone() : null;
      lineID_ = other.lineID_;
      positions_ = other.positions_.Clone();
      beginStopID_ = other.beginStopID_;
      endStopID_ = other.endStopID_;
      totalTravelTime_ = other.totalTravelTime_;
      isBackRoute_ = other.isBackRoute_;
      streetSegmentOffsetMap_ = other.streetSegmentOffsetMap_.Clone();
      pathSegmentInfoMap_ = other.pathSegmentInfoMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route Clone() {
      return new Route(this);
    }

    /// <summary>Field number for the "mapObject" field.</summary>
    public const int MapObjectFieldNumber = 1;
    private global::Transidious.Serialization.MapObject mapObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transidious.Serialization.MapObject MapObject {
      get { return mapObject_; }
      set {
        mapObject_ = value;
      }
    }

    /// <summary>Field number for the "lineID" field.</summary>
    public const int LineIDFieldNumber = 2;
    private uint lineID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LineID {
      get { return lineID_; }
      set {
        lineID_ = value;
      }
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Transidious.Serialization.Vector2> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(26, global::Transidious.Serialization.Vector2.Parser);
    private readonly pbc::RepeatedField<global::Transidious.Serialization.Vector2> positions_ = new pbc::RepeatedField<global::Transidious.Serialization.Vector2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Transidious.Serialization.Vector2> Positions {
      get { return positions_; }
    }

    /// <summary>Field number for the "beginStopID" field.</summary>
    public const int BeginStopIDFieldNumber = 4;
    private uint beginStopID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeginStopID {
      get { return beginStopID_; }
      set {
        beginStopID_ = value;
      }
    }

    /// <summary>Field number for the "endStopID" field.</summary>
    public const int EndStopIDFieldNumber = 5;
    private uint endStopID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndStopID {
      get { return endStopID_; }
      set {
        endStopID_ = value;
      }
    }

    /// <summary>Field number for the "totalTravelTime" field.</summary>
    public const int TotalTravelTimeFieldNumber = 6;
    private float totalTravelTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TotalTravelTime {
      get { return totalTravelTime_; }
      set {
        totalTravelTime_ = value;
      }
    }

    /// <summary>Field number for the "isBackRoute" field.</summary>
    public const int IsBackRouteFieldNumber = 7;
    private bool isBackRoute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBackRoute {
      get { return isBackRoute_; }
      set {
        isBackRoute_ = value;
      }
    }

    /// <summary>Field number for the "streetSegmentOffsetMap" field.</summary>
    public const int StreetSegmentOffsetMapFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Transidious.Serialization.Route.Types.StreetSegmentOffsetMapEntry> _repeated_streetSegmentOffsetMap_codec
        = pb::FieldCodec.ForMessage(66, global::Transidious.Serialization.Route.Types.StreetSegmentOffsetMapEntry.Parser);
    private readonly pbc::RepeatedField<global::Transidious.Serialization.Route.Types.StreetSegmentOffsetMapEntry> streetSegmentOffsetMap_ = new pbc::RepeatedField<global::Transidious.Serialization.Route.Types.StreetSegmentOffsetMapEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Transidious.Serialization.Route.Types.StreetSegmentOffsetMapEntry> StreetSegmentOffsetMap {
      get { return streetSegmentOffsetMap_; }
    }

    /// <summary>Field number for the "pathSegmentInfoMap" field.</summary>
    public const int PathSegmentInfoMapFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Transidious.Serialization.Route.Types.PathSegmentInfoMapEntry> _repeated_pathSegmentInfoMap_codec
        = pb::FieldCodec.ForMessage(74, global::Transidious.Serialization.Route.Types.PathSegmentInfoMapEntry.Parser);
    private readonly pbc::RepeatedField<global::Transidious.Serialization.Route.Types.PathSegmentInfoMapEntry> pathSegmentInfoMap_ = new pbc::RepeatedField<global::Transidious.Serialization.Route.Types.PathSegmentInfoMapEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Transidious.Serialization.Route.Types.PathSegmentInfoMapEntry> PathSegmentInfoMap {
      get { return pathSegmentInfoMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Route);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Route other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapObject, other.MapObject)) return false;
      if (LineID != other.LineID) return false;
      if(!positions_.Equals(other.positions_)) return false;
      if (BeginStopID != other.BeginStopID) return false;
      if (EndStopID != other.EndStopID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalTravelTime, other.TotalTravelTime)) return false;
      if (IsBackRoute != other.IsBackRoute) return false;
      if(!streetSegmentOffsetMap_.Equals(other.streetSegmentOffsetMap_)) return false;
      if(!pathSegmentInfoMap_.Equals(other.pathSegmentInfoMap_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapObject_ != null) hash ^= MapObject.GetHashCode();
      if (LineID != 0) hash ^= LineID.GetHashCode();
      hash ^= positions_.GetHashCode();
      if (BeginStopID != 0) hash ^= BeginStopID.GetHashCode();
      if (EndStopID != 0) hash ^= EndStopID.GetHashCode();
      if (TotalTravelTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalTravelTime);
      if (IsBackRoute != false) hash ^= IsBackRoute.GetHashCode();
      hash ^= streetSegmentOffsetMap_.GetHashCode();
      hash ^= pathSegmentInfoMap_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapObject_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapObject);
      }
      if (LineID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LineID);
      }
      positions_.WriteTo(output, _repeated_positions_codec);
      if (BeginStopID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BeginStopID);
      }
      if (EndStopID != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(EndStopID);
      }
      if (TotalTravelTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(TotalTravelTime);
      }
      if (IsBackRoute != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsBackRoute);
      }
      streetSegmentOffsetMap_.WriteTo(output, _repeated_streetSegmentOffsetMap_codec);
      pathSegmentInfoMap_.WriteTo(output, _repeated_pathSegmentInfoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapObject);
      }
      if (LineID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineID);
      }
      size += positions_.CalculateSize(_repeated_positions_codec);
      if (BeginStopID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeginStopID);
      }
      if (EndStopID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndStopID);
      }
      if (TotalTravelTime != 0F) {
        size += 1 + 4;
      }
      if (IsBackRoute != false) {
        size += 1 + 1;
      }
      size += streetSegmentOffsetMap_.CalculateSize(_repeated_streetSegmentOffsetMap_codec);
      size += pathSegmentInfoMap_.CalculateSize(_repeated_pathSegmentInfoMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Route other) {
      if (other == null) {
        return;
      }
      if (other.mapObject_ != null) {
        if (mapObject_ == null) {
          MapObject = new global::Transidious.Serialization.MapObject();
        }
        MapObject.MergeFrom(other.MapObject);
      }
      if (other.LineID != 0) {
        LineID = other.LineID;
      }
      positions_.Add(other.positions_);
      if (other.BeginStopID != 0) {
        BeginStopID = other.BeginStopID;
      }
      if (other.EndStopID != 0) {
        EndStopID = other.EndStopID;
      }
      if (other.TotalTravelTime != 0F) {
        TotalTravelTime = other.TotalTravelTime;
      }
      if (other.IsBackRoute != false) {
        IsBackRoute = other.IsBackRoute;
      }
      streetSegmentOffsetMap_.Add(other.streetSegmentOffsetMap_);
      pathSegmentInfoMap_.Add(other.pathSegmentInfoMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mapObject_ == null) {
              MapObject = new global::Transidious.Serialization.MapObject();
            }
            input.ReadMessage(MapObject);
            break;
          }
          case 16: {
            LineID = input.ReadUInt32();
            break;
          }
          case 26: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
          case 32: {
            BeginStopID = input.ReadUInt32();
            break;
          }
          case 40: {
            EndStopID = input.ReadUInt32();
            break;
          }
          case 53: {
            TotalTravelTime = input.ReadFloat();
            break;
          }
          case 56: {
            IsBackRoute = input.ReadBool();
            break;
          }
          case 66: {
            streetSegmentOffsetMap_.AddEntriesFrom(input, _repeated_streetSegmentOffsetMap_codec);
            break;
          }
          case 74: {
            pathSegmentInfoMap_.AddEntriesFrom(input, _repeated_pathSegmentInfoMap_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Route message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PathSegmentInfo : pb::IMessage<PathSegmentInfo> {
        private static readonly pb::MessageParser<PathSegmentInfo> _parser = new pb::MessageParser<PathSegmentInfo>(() => new PathSegmentInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PathSegmentInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Transidious.Serialization.Route.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PathSegmentInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PathSegmentInfo(PathSegmentInfo other) : this() {
          segmentID_ = other.segmentID_;
          lane_ = other.lane_;
          offset_ = other.offset_;
          length_ = other.length_;
          partialStart_ = other.partialStart_;
          partialEnd_ = other.partialEnd_;
          backward_ = other.backward_;
          direction_ = other.direction_ != null ? other.direction_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PathSegmentInfo Clone() {
          return new PathSegmentInfo(this);
        }

        /// <summary>Field number for the "segmentID" field.</summary>
        public const int SegmentIDFieldNumber = 1;
        private uint segmentID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SegmentID {
          get { return segmentID_; }
          set {
            segmentID_ = value;
          }
        }

        /// <summary>Field number for the "lane" field.</summary>
        public const int LaneFieldNumber = 2;
        private int lane_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Lane {
          get { return lane_; }
          set {
            lane_ = value;
          }
        }

        /// <summary>Field number for the "offset" field.</summary>
        public const int OffsetFieldNumber = 3;
        private int offset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Offset {
          get { return offset_; }
          set {
            offset_ = value;
          }
        }

        /// <summary>Field number for the "length" field.</summary>
        public const int LengthFieldNumber = 4;
        private int length_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Length {
          get { return length_; }
          set {
            length_ = value;
          }
        }

        /// <summary>Field number for the "partialStart" field.</summary>
        public const int PartialStartFieldNumber = 5;
        private bool partialStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool PartialStart {
          get { return partialStart_; }
          set {
            partialStart_ = value;
          }
        }

        /// <summary>Field number for the "partialEnd" field.</summary>
        public const int PartialEndFieldNumber = 6;
        private bool partialEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool PartialEnd {
          get { return partialEnd_; }
          set {
            partialEnd_ = value;
          }
        }

        /// <summary>Field number for the "backward" field.</summary>
        public const int BackwardFieldNumber = 7;
        private bool backward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Backward {
          get { return backward_; }
          set {
            backward_ = value;
          }
        }

        /// <summary>Field number for the "direction" field.</summary>
        public const int DirectionFieldNumber = 8;
        private global::Transidious.Serialization.Vector2 direction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Transidious.Serialization.Vector2 Direction {
          get { return direction_; }
          set {
            direction_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PathSegmentInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PathSegmentInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SegmentID != other.SegmentID) return false;
          if (Lane != other.Lane) return false;
          if (Offset != other.Offset) return false;
          if (Length != other.Length) return false;
          if (PartialStart != other.PartialStart) return false;
          if (PartialEnd != other.PartialEnd) return false;
          if (Backward != other.Backward) return false;
          if (!object.Equals(Direction, other.Direction)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SegmentID != 0) hash ^= SegmentID.GetHashCode();
          if (Lane != 0) hash ^= Lane.GetHashCode();
          if (Offset != 0) hash ^= Offset.GetHashCode();
          if (Length != 0) hash ^= Length.GetHashCode();
          if (PartialStart != false) hash ^= PartialStart.GetHashCode();
          if (PartialEnd != false) hash ^= PartialEnd.GetHashCode();
          if (Backward != false) hash ^= Backward.GetHashCode();
          if (direction_ != null) hash ^= Direction.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SegmentID != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(SegmentID);
          }
          if (Lane != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Lane);
          }
          if (Offset != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Offset);
          }
          if (Length != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Length);
          }
          if (PartialStart != false) {
            output.WriteRawTag(40);
            output.WriteBool(PartialStart);
          }
          if (PartialEnd != false) {
            output.WriteRawTag(48);
            output.WriteBool(PartialEnd);
          }
          if (Backward != false) {
            output.WriteRawTag(56);
            output.WriteBool(Backward);
          }
          if (direction_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(Direction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SegmentID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SegmentID);
          }
          if (Lane != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lane);
          }
          if (Offset != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
          }
          if (Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
          }
          if (PartialStart != false) {
            size += 1 + 1;
          }
          if (PartialEnd != false) {
            size += 1 + 1;
          }
          if (Backward != false) {
            size += 1 + 1;
          }
          if (direction_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PathSegmentInfo other) {
          if (other == null) {
            return;
          }
          if (other.SegmentID != 0) {
            SegmentID = other.SegmentID;
          }
          if (other.Lane != 0) {
            Lane = other.Lane;
          }
          if (other.Offset != 0) {
            Offset = other.Offset;
          }
          if (other.Length != 0) {
            Length = other.Length;
          }
          if (other.PartialStart != false) {
            PartialStart = other.PartialStart;
          }
          if (other.PartialEnd != false) {
            PartialEnd = other.PartialEnd;
          }
          if (other.Backward != false) {
            Backward = other.Backward;
          }
          if (other.direction_ != null) {
            if (direction_ == null) {
              Direction = new global::Transidious.Serialization.Vector2();
            }
            Direction.MergeFrom(other.Direction);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SegmentID = input.ReadUInt32();
                break;
              }
              case 16: {
                Lane = input.ReadInt32();
                break;
              }
              case 24: {
                Offset = input.ReadInt32();
                break;
              }
              case 32: {
                Length = input.ReadInt32();
                break;
              }
              case 40: {
                PartialStart = input.ReadBool();
                break;
              }
              case 48: {
                PartialEnd = input.ReadBool();
                break;
              }
              case 56: {
                Backward = input.ReadBool();
                break;
              }
              case 66: {
                if (direction_ == null) {
                  Direction = new global::Transidious.Serialization.Vector2();
                }
                input.ReadMessage(Direction);
                break;
              }
            }
          }
        }

      }

      public sealed partial class StreetSegmentKey : pb::IMessage<StreetSegmentKey> {
        private static readonly pb::MessageParser<StreetSegmentKey> _parser = new pb::MessageParser<StreetSegmentKey>(() => new StreetSegmentKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StreetSegmentKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Transidious.Serialization.Route.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StreetSegmentKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StreetSegmentKey(StreetSegmentKey other) : this() {
          segment_ = other.segment_;
          lane_ = other.lane_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StreetSegmentKey Clone() {
          return new StreetSegmentKey(this);
        }

        /// <summary>Field number for the "segment" field.</summary>
        public const int SegmentFieldNumber = 1;
        private int segment_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Segment {
          get { return segment_; }
          set {
            segment_ = value;
          }
        }

        /// <summary>Field number for the "lane" field.</summary>
        public const int LaneFieldNumber = 2;
        private int lane_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Lane {
          get { return lane_; }
          set {
            lane_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StreetSegmentKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StreetSegmentKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Segment != other.Segment) return false;
          if (Lane != other.Lane) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Segment != 0) hash ^= Segment.GetHashCode();
          if (Lane != 0) hash ^= Lane.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Segment != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Segment);
          }
          if (Lane != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Lane);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Segment != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Segment);
          }
          if (Lane != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lane);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StreetSegmentKey other) {
          if (other == null) {
            return;
          }
          if (other.Segment != 0) {
            Segment = other.Segment;
          }
          if (other.Lane != 0) {
            Lane = other.Lane;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Segment = input.ReadInt32();
                break;
              }
              case 16: {
                Lane = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class StreetSegmentOffsetMapEntry : pb::IMessage<StreetSegmentOffsetMapEntry> {
        private static readonly pb::MessageParser<StreetSegmentOffsetMapEntry> _parser = new pb::MessageParser<StreetSegmentOffsetMapEntry>(() => new StreetSegmentOffsetMapEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StreetSegmentOffsetMapEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Transidious.Serialization.Route.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StreetSegmentOffsetMapEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StreetSegmentOffsetMapEntry(StreetSegmentOffsetMapEntry other) : this() {
          key_ = other.key_ != null ? other.key_.Clone() : null;
          value_ = other.value_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StreetSegmentOffsetMapEntry Clone() {
          return new StreetSegmentOffsetMapEntry(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private global::Transidious.Serialization.Route.Types.StreetSegmentKey key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Transidious.Serialization.Route.Types.StreetSegmentKey Key {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Transidious.Serialization.Route.Types.PathSegmentInfo> _repeated_value_codec
            = pb::FieldCodec.ForMessage(18, global::Transidious.Serialization.Route.Types.PathSegmentInfo.Parser);
        private readonly pbc::RepeatedField<global::Transidious.Serialization.Route.Types.PathSegmentInfo> value_ = new pbc::RepeatedField<global::Transidious.Serialization.Route.Types.PathSegmentInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Transidious.Serialization.Route.Types.PathSegmentInfo> Value {
          get { return value_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StreetSegmentOffsetMapEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StreetSegmentOffsetMapEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Key, other.Key)) return false;
          if(!value_.Equals(other.value_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (key_ != null) hash ^= Key.GetHashCode();
          hash ^= value_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (key_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Key);
          }
          value_.WriteTo(output, _repeated_value_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (key_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
          }
          size += value_.CalculateSize(_repeated_value_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StreetSegmentOffsetMapEntry other) {
          if (other == null) {
            return;
          }
          if (other.key_ != null) {
            if (key_ == null) {
              Key = new global::Transidious.Serialization.Route.Types.StreetSegmentKey();
            }
            Key.MergeFrom(other.Key);
          }
          value_.Add(other.value_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (key_ == null) {
                  Key = new global::Transidious.Serialization.Route.Types.StreetSegmentKey();
                }
                input.ReadMessage(Key);
                break;
              }
              case 18: {
                value_.AddEntriesFrom(input, _repeated_value_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class PathSegmentInfoMapEntry : pb::IMessage<PathSegmentInfoMapEntry> {
        private static readonly pb::MessageParser<PathSegmentInfoMapEntry> _parser = new pb::MessageParser<PathSegmentInfoMapEntry>(() => new PathSegmentInfoMapEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PathSegmentInfoMapEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Transidious.Serialization.Route.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PathSegmentInfoMapEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PathSegmentInfoMapEntry(PathSegmentInfoMapEntry other) : this() {
          key_ = other.key_;
          value_ = other.value_ != null ? other.value_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PathSegmentInfoMapEntry Clone() {
          return new PathSegmentInfoMapEntry(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private uint key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Key {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private global::Transidious.Serialization.Route.Types.PathSegmentInfo value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Transidious.Serialization.Route.Types.PathSegmentInfo Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PathSegmentInfoMapEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PathSegmentInfoMapEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (!object.Equals(Value, other.Value)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key != 0) hash ^= Key.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Key);
          }
          if (value_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PathSegmentInfoMapEntry other) {
          if (other == null) {
            return;
          }
          if (other.Key != 0) {
            Key = other.Key;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              Value = new global::Transidious.Serialization.Route.Types.PathSegmentInfo();
            }
            Value.MergeFrom(other.Value);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Key = input.ReadUInt32();
                break;
              }
              case 18: {
                if (value_ == null) {
                  Value = new global::Transidious.Serialization.Route.Types.PathSegmentInfo();
                }
                input.ReadMessage(Value);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code


class Tag<let key: string, let value: string>
class NotTag<key: string, value: string> : Tag<key, value>

enum GeoType {
    Way, Relation, Node
}

enum TransitLineType {
    Bus, Tram, Subway, LightRail, LongDistanceTrain, Ferry
}

class TransitLineInfo<let type: TransitLineType, let tags: list<Tag> >
class TransitStopInfo<let tags: list<Tag> >

enum StreetType {
    Highway,
    Primary,
    Secondary,
    Tertiary,
    Residential,
    Link,
    Path,
    River,
}

class StreetInfo<let type: StreetType,
                 let tags: list<Tag>,
                 let litTag: string = "lit",
                 let onewayTag: string = "oneway",
                 let maxspeedTag: string = "maxspeed">

class BoundaryInfo<let name: string,
                   let tags: list<Tag>,
                   let wayTags: list<Tag>,
                   let relationName: string = "">

class RiverInfo<let relationTags: list<Tag>, let wayTags: list<Tag> >

enum NatureType {
    Park,
    Lake,
    Green,
    SportsPitch,
    Allotment,
    Cemetery,
    FootpathArea,
    Beach,
    Forest,
    Parking,
}

class NaturalFeatureInfo<let type: NatureType, let tags: list<Tag>, let geoTypes: list<GeoType> >

enum BuildingType {
    Residential,
    Shop,
    Office,
    ElementarySchool,
    HighSchool,
    University,
    Hospital,
    Stadium,

    GroceryStore,
}

class BuildingInfo<let type: BuildingType, let tags: list<Tag>, let geoTypes: list<GeoType> >

class Area {
    let country: string
    let nodeFile: string
    let boundary: BoundaryInfo
    let streets: list<StreetInfo>

    let transitStops: list<TransitStopInfo>
    let transitLines: list<TransitLineInfo>

    let rivers: list<RiverInfo>
    let nature: list<NaturalFeatureInfo>

    let buildings: list<BuildingInfo>
}

class DefaultArea : Area
{
    override country = "Deutschland"
    override nodeFile = ""
    override boundary = BoundaryInfo<"", [], []>

    override streets = [
        StreetInfo<.Highway, [
            Tag<"highway", "motorway">
        ]>,

        StreetInfo<.Residential, [
            Tag<"highway", "residential">
        ]>,
        StreetInfo<.Residential, [
            Tag<"highway", "living_street">
        ]>,
        StreetInfo<.Primary, [
            Tag<"highway", "primary">
        ]>,
        StreetInfo<.Link, [
            Tag<"highway", "motorway_link">
        ]>,
        StreetInfo<.Link, [
            Tag<"highway", "primary_link">
        ]>,
        StreetInfo<.Secondary, [
            Tag<"highway", "secondary">
        ]>,
        StreetInfo<.Link, [
            Tag<"highway", "secondary_link">
        ]>,
        StreetInfo<.Tertiary, [
            Tag<"highway", "tertiary">
        ]>,
        StreetInfo<.Link, [
            Tag<"highway", "tertiary_link">
        ]>,
        // StreetInfo<.Path, [
        //     Tag<"highway", "path">
        // ]>,
        // StreetInfo<.Path, [
        //     Tag<"highway", "service">
        // ]>,
        // StreetInfo<.Path, [
        //     Tag<"highway", "track">
        // ]>,
        // StreetInfo<.Path, [
        //     Tag<"highway", "footway">
        // ]>,
        StreetInfo<.River, [
            Tag<"waterway", "river">
        ]>,
    ]

    override transitStops = [
        TransitStopInfo<[
            Tag<"highway", "bus_stop">,
        ]>,
        TransitStopInfo<[
            Tag<"public_transport", "stop_position">,
        ]>,
        TransitStopInfo<[
            Tag<"railway", "stop">,
        ]>,
        TransitStopInfo<[
            Tag<"railway", "stop_exit_only">,
        ]>,
        TransitStopInfo<[
            Tag<"railway", "tram_stop">
        ]>,
        TransitStopInfo<[
            Tag<"railway", "tram_stop_exit_only">,
        ]>
    ]

    override transitLines = [
        TransitLineInfo<.Bus, [
            Tag<"type", "route">,
            Tag<"route", "bus">
        ]>,
        TransitLineInfo<.Tram, [
            Tag<"type", "route">,
            Tag<"route", "tram">
        ]>,
        TransitLineInfo<.Tram, [
            Tag<"type", "route">,
            Tag<"route", "light_rail">
        ]>,
        TransitLineInfo<.Subway, [
            Tag<"type", "route">,
            Tag<"route", "subway">
        ]>,
        TransitLineInfo<.LightRail, [
            Tag<"type", "route">,
            Tag<"route", "train">,
            Tag<"line", "light_rail">
        ]>,
        TransitLineInfo<.LightRail, [
            Tag<"type", "route">,
            Tag<"route", "train">,
            Tag<"service", "regional">
        ]>
    ]

    override rivers = [
        RiverInfo<[
            Tag<"type", "waterway">,
            Tag<"waterway", "river">
        ], [
            Tag<"waterway", "river">
        ]>
    ]

    override nature = [
        NaturalFeatureInfo<.Park, [
            Tag<"leisure", "park">
        ], [.Way, .Relation]>,

        NaturalFeatureInfo<.Green, [
            Tag<"landuse", "village_green">
        ], [.Way, .Relation]>,
        NaturalFeatureInfo<.Green, [
            Tag<"landuse", "grass">
        ], [.Way, .Relation]>,
        NaturalFeatureInfo<.Green, [
            Tag<"leisure", "sports_centre">
        ], [.Way, .Relation]>,
        NaturalFeatureInfo<.Green, [
            Tag<"landuse", "recreation_ground">
        ], [.Way, .Relation]>,

        NaturalFeatureInfo<.Allotment, [
            Tag<"landuse", "allotments">
        ], [.Way, .Relation]>,

        NaturalFeatureInfo<.Cemetery, [
            Tag<"landuse", "cemetery">
        ], [.Way, .Relation]>,

        NaturalFeatureInfo<.SportsPitch, [
            Tag<"leisure", "pitch">
        ], [.Way, .Relation]>,
        NaturalFeatureInfo<.SportsPitch, [
            Tag<"leisure", "track">
        ], [.Way, .Relation]>,

        NaturalFeatureInfo<.Lake, [
            Tag<"natural", "water">
        ], [.Way, .Relation]>,

        NaturalFeatureInfo<.FootpathArea, [
            Tag<"highway", "footpath">,
            Tag<"area", "yes">,
        ], [.Way, .Relation]>,

        NaturalFeatureInfo<.Forest, [
            Tag<"landuse", "forest">,
        ], [.Way, .Relation]>,

        NaturalFeatureInfo<.Beach, [
            Tag<"natural", "beach">,
        ], [.Way, .Relation]>,

        NaturalFeatureInfo<.Parking, [
            Tag<"amenity", "parking">,
        ], [.Way, .Relation]>,
    ]

    override buildings = [
        BuildingInfo<.Residential, [
            Tag<"building", "residential">
        ], [.Way, .Relation]>,
        BuildingInfo<.Residential, [
            Tag<"building", "house">
        ], [.Way, .Relation]>,
        BuildingInfo<.Residential, [
            Tag<"building", "yes">
        ], [.Way, .Relation]>,

        BuildingInfo<.Shop, [
            Tag<"building", "retail">
        ], [.Way, .Relation]>,
        BuildingInfo<.Shop, [
            Tag<"building", "commercial">
        ], [.Way, .Relation]>,

        BuildingInfo<.Office, [
            Tag<"building", "industrial">
        ], [.Way, .Relation]>,
        BuildingInfo<.Office, [
            Tag<"building", "office">
        ], [.Way, .Relation]>,

        BuildingInfo<.University, [
            Tag<"building", "university">
        ], [.Way, .Relation]>,

        BuildingInfo<.Hospital, [
            Tag<"building", "hospital">
        ], [.Way, .Relation]>,

        BuildingInfo<.HighSchool, [
            Tag<"building", "school">
        ], [.Way, .Relation]>,

        BuildingInfo<.Stadium, [
            Tag<"building", "stadium">
        ], [.Way, .Relation]>
    ]
}

def Default : DefaultArea

def Berlin : DefaultArea {
    boundary = BoundaryInfo<"Berlin", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "4">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "4">
    ]>
}

def Charlottenburg : DefaultArea {
    country = "Deutschland/Berlin"
    boundary = BoundaryInfo<"Charlottenburg", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "10">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "10">
    ]>
}

def CharlottenburgWilmersdorf : DefaultArea {
    country = "Deutschland/Berlin"
    nodeFile = "Deutschland/Berlin"

    boundary = BoundaryInfo<"Charlottenburg-Wilmersdorf", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "9">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "9">
    ]>
}

def Mitte : DefaultArea {
    nodeFile = "Deutschland/Berlin"

    boundary = BoundaryInfo<"Mitte", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "9">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "9">
    ]>
}

def Spandau : DefaultArea {
    nodeFile = "Deutschland/Berlin"

    boundary = BoundaryInfo<"Spandau", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "9">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "9">
    ]>
}

def Saarbruecken : DefaultArea {
    boundary = BoundaryInfo<"SaarbrÃ¼cken", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "8">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "8">
    ]>
}

def Andorra : DefaultArea {
    boundary = BoundaryInfo<"Andorra", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "2">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"border_type", "nation">,
        Tag<"admin_level", "2">
    ]>
}

def Karlsruhe : DefaultArea {
    country = "Deutschland"
    boundary = BoundaryInfo<"Karlsruhe", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "6">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "6">
    ]>
}

def Freiburg : DefaultArea {
    country = "Deutschland"
    boundary = BoundaryInfo<"Freiburg", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "6">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "6">
    ], "Freiburg im Breisgau">
}

def Frankfurt : DefaultArea {
    country = "Deutschland"
    boundary = BoundaryInfo<"Frankfurt", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "6">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "6">
    ], "Frankfurt am Main">
}

def London : DefaultArea {
    country = "UK"
    boundary = BoundaryInfo<"London", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "6">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "6">
    ]>
}

def NewYorkCity : DefaultArea {
    country = "NewYorkState"
    boundary = BoundaryInfo<"NewYorkCity", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "5">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "5">
    ]>
}



def Seattle : DefaultArea {
    country = "WashingtonState"
    boundary = BoundaryInfo<"Seattle", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "8">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "8">
    ]>
}

def Paris : DefaultArea {
    country = "France"
    boundary = BoundaryInfo<"Paris", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "8">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "8">
    ]>
}

def NiagaraFalls : DefaultArea {
    country = "NewYorkState"
    boundary = BoundaryInfo<"NiagaraFalls", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "8">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "8">
    ]>
}

def Konstanz : DefaultArea {
    country = "Deutschland"
    boundary = BoundaryInfo<"Konstanz", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "8">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "8">
    ]>
}

def MÃ¼nchen : DefaultArea {
    country = "Deutschland"
    boundary = BoundaryInfo<"MÃ¼nchen", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "6">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "6">
    ]>
}

def Paradise : DefaultArea {
    country = "California"
    boundary = BoundaryInfo<"Paradise", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "8">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "8">
    ]>
}

def Seaside : DefaultArea {
    country = "California"
    boundary = BoundaryInfo<"Seaside", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "8">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "8">
    ]>
}
def Salinas : DefaultArea {
    country = "California"
    boundary = BoundaryInfo<"Salinas", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "8">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "8">
    ]>
}

def Werder : DefaultArea {
    country = "Deutschland"
    boundary = BoundaryInfo<"Werder", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "8">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "8">
    ], "Werder (Havel)">
}

def Manhattan : DefaultArea {
    country = "NewYorkState"
    boundary = BoundaryInfo<"Manhattan", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "7">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "7">
    ]>
}

def Vancouver : DefaultArea {
    country = "Canada"
    boundary = BoundaryInfo<"Vancouver", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "8">
    ], [
        Tag<"boundary", "administrative">,
        Tag<"admin_level", "8">
    ]>
}

def Fuerteventura : DefaultArea {
    country = "CanaryIslands"
    boundary = BoundaryInfo<"Fuerteventura", [
        Tag<"type", "boundary">,
        Tag<"admin_level", "0">
    ], [
        Tag<"boundary", "political">,
        Tag<"admin_level", "0">
    ]>
}